//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.
public class PokeApiMovesJSON {
	public Integer accuracy {get;set;}
	public Contest_combos contest_combos {get;set;}
	public Contest_effect contest_effect {get;set;}
	public Use_after contest_type {get;set;}
	public Use_after damage_class {get;set;}
	public Integer effect_chance {get;set;}
	public List<Effect_changes> effect_changes {get;set;}
	public List<Effect_entries> effect_entries {get;set;}
	public List<Flavor_text_entries> flavor_text_entries {get;set;}
	public Use_after generation {get;set;}
	public Integer id {get;set;}
	public List<Use_after> learned_by_pokemon {get;set;}
	public List<Machines> machines {get;set;}
	public Meta meta {get;set;}
	public String name {get;set;}
	public List<Names> names {get;set;}
	public List<Past_values> past_values {get;set;}
	public Integer power {get;set;}
	public Integer pp {get;set;}
	public Integer priority {get;set;}
	public List<Stats> stat_changes {get;set;}
	public Contest_effect super_contest_effect {get;set;}
	public Use_after target {get;set;}
	public Use_after type {get;set;}
	public PokeApiMovesJSON(JSONParser parser) {
        accuracy = 0;
        effect_chance = 0;
        power = 0;
        pp = 0;
        priority = 0;
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'accuracy') {
						accuracy = parser.getIntegerValue();
					} else if (text == 'contest_combos') {
						contest_combos = new Contest_combos(parser);
					} else if (text == 'contest_effect') {
						contest_effect = new Contest_effect(parser);
					} else if (text == 'contest_type') {
						contest_type = new Use_after(parser);
					} else if (text == 'damage_class') {
						damage_class = new Use_after(parser);
					} else if (text == 'effect_chance') {
						effect_chance = parser.getIntegerValue();
					} else if (text == 'effect_changes') {
						effect_changes = arrayOfEffect_changes(parser);
					} else if (text == 'effect_entries') {
						effect_entries = arrayOfEffect_entries(parser);
					} else if (text == 'flavor_text_entries') {
						flavor_text_entries = arrayOfFlavor_text_entries(parser);
					} else if (text == 'generation') {
						generation = new Use_after(parser);
					} else if (text == 'id') {
						id = parser.getIntegerValue();
					} else if (text == 'learned_by_pokemon') {
						learned_by_pokemon = arrayOfUse_after(parser);
					} else if (text == 'machines') {
						machines = arrayOfMachines(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'names') {
						names = arrayOfNames(parser);
					} else if (text == 'past_values') {
						past_values = arrayOfPast_values(parser);
					} else if (text == 'power') {
						power = parser.getIntegerValue();
					} else if (text == 'pp') {
						pp = parser.getIntegerValue();
					} else if (text == 'priority') {
						priority = parser.getIntegerValue();
					} else if (text == 'stat_changes') {
						stat_changes = arrayOfStats(parser);
					} else if (text == 'super_contest_effect') {
						super_contest_effect = new Contest_effect(parser);
					} else if (text == 'target') {
						target = new Use_after(parser);
					} else if (text == 'type') {
						type = new Use_after(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'PokeApiMovesJSON consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	public class Contest_combos {
		public Normal normal {get;set;} 
		public Normal super_Z {get;set;} // in json: super
		public Contest_combos(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Normal {
		public Normal(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Contest_effect {
		public String url {get;set;} 
		public Contest_effect(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contest_effect consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Effect_entries {
		public String effect {get;set;}
		public Use_after language {get;set;}
		public String short_effect {get;set;}
		public Effect_entries(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'effect') {
							effect = parser.getText();
						} else if (text == 'language') {
							language = new Use_after(parser);
						} else if (text == 'short_effect') {
							short_effect = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Effect_entries consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Use_after {
		public String name {get;set;} 
		public String url {get;set;} 
		public Use_after(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Use_after consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Effect_changes {
		public Effect_changes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Flavor_text_entries {
		public Flavor_text_entries(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Machines {
		public Machines(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Meta {
		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Names {
		public Names(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Past_values {
		public Past_values(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class Stats {
		public Stats(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	public static PokeApiMovesJSON parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new PokeApiMovesJSON(parser);
	}
    private static List<Effect_changes> arrayOfEffect_changes(System.JSONParser p) {
        List<Effect_changes> res = new List<Effect_changes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Effect_changes(p));
        }
        return res;
    }
    private static List<Effect_entries> arrayOfEffect_entries(System.JSONParser p) {
        List<Effect_entries> res = new List<Effect_entries>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Effect_entries(p));
        }
        return res;
    }
	private static List<Flavor_text_entries> arrayOfFlavor_text_entries(System.JSONParser p) {
        List<Flavor_text_entries> res = new List<Flavor_text_entries>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Flavor_text_entries(p));
        }
        return res;
    }
	private static List<Use_after> arrayOfUse_after(System.JSONParser p) {
        List<Use_after> res = new List<Use_after>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Use_after(p));
        }
        return res;
    }
	private static List<Machines> arrayOfMachines(System.JSONParser p) {
        List<Machines> res = new List<Machines>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Machines(p));
        }
        return res;
    }
    private static List<Names> arrayOfNames(System.JSONParser p) {
        List<Names> res = new List<Names>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Names(p));
        }
        return res;
    }
    private static List<Past_values> arrayOfPast_values(System.JSONParser p) {
        List<Past_values> res = new List<Past_values>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Past_values(p));
        }
        return res;
    }
	private static List<Stats> arrayOfStats(System.JSONParser p) {
        List<Stats> res = new List<Stats>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Stats(p));
        }
        return res;
    }
}